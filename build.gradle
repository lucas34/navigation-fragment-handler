apply plugin: 'com.android.library'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group 'fr.nelaupe'
version '1.0.2'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 22
        versionCode 3
        versionName "1.0.2"
    }
    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def generatePom() {
    def pom = pom {
        project {
            name 'navigation-fragment-handler'
            packaging 'aar'
            groupId project.group
            artifactId project.name
            version project.version
            description 'Navigation Fragment Handler for Android'
            inceptionYear '2015'
            url 'http://www.lucas-nelaupe.fr'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }

            scm {
                url "https://github.com/lucas34/navigation-fragment-handler"
                connection "scm:git:git@github.com/lucas34/navigation-fragment-handler.git"
                developerConnection "scm:git:git@github.com:lucas34/navigation-fragment-handler.git"
            }


            developers {
                developer {
                    id 'lucas34'
                    name 'Lucas Nelaupe'
                    email 'lucas34990@gmail.com'
                    url 'http://www.lucas-nelaupe.fr'
                    roles {
                        role 'author'
                        role 'developer'
                    }
                    timezone '+8'
                }
            }
        }
    }
}

signing {
    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    if (project.hasProperty('sonatypeUsername')) {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }
                pom = generatePom()
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    if (project.hasProperty('androidSdkDir')) {
        def name = variant.buildType.name
        if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
            return;
        }

        task("javadoc${variant.name.capitalize()}", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar = project.androidSdkDir + "/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }

        task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
            description "Bundles Javadoc into zip for $variant.name."
            classifier = "javadoc"
            from tasks["javadoc${variant.name.capitalize()}"]
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task jar(type: Jar) {
    from 'build/intermediates/classes/release'
}

task javadocJar(type: Jar, dependsOn: "javadocRelease") {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}
